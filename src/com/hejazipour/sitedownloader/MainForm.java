/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainForm.java
 *
 * Created on Jun 17, 2011, 6:11:47 PM
 */
package com.hejazipour.sitedownloader;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import org.jsoup.Jsoup;
import org.jsoup.helper.Validate;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;

/**
 *
 * @author javad
 */
public class MainForm extends javax.swing.JFrame {

    /** Creates new form MainForm */
    public MainForm() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        urlEdit = new javax.swing.JTextField();
        exitButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputText = new javax.swing.JTextArea();
        downloadButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        savePathEdit = new javax.swing.JTextField();
        browsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("آدرس سایت");

        exitButton.setText("خروج");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("خروجی");

        outputText.setColumns(20);
        outputText.setRows(5);
        jScrollPane1.setViewportView(outputText);

        downloadButton.setText("دانلود");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("مسیر دانلود");

        browsButton.setText("...");
        browsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(153, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(exitButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(browsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(downloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(savePathEdit)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel3))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(urlEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel1))))))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(urlEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(downloadButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(savePathEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browsButton)
                    .addComponent(exitButton))
                .addGap(55, 55, 55)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        //1: if url is empty show error
        if (urlEdit.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "لطفا آدرس سایت مورد نظر را وارد نمایید",
                    "خطا",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        //2 : if save path is invalid show error
        if (savePathEdit.getText().trim().isEmpty() || !(new File(savePathEdit.getText()).exists())) {
            JOptionPane.showMessageDialog(this, "لطفا مسیر معتبری را برای ذخیره انتخاب نمایید",
                    "خطا",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        //3 : create temp directory in path , if exists remove it first
/*        if (new File(savePathEdit.getText() + "\\temp").exists()) {
        boolean success = new File(savePathEdit.getText() + "\\temp").delete();
        if (!success) {
        JOptionPane.showMessageDialog(this, "امکان ذخیره اطلاعات در مسیر مورد نظر وجود ندارد",
        "خطا",
        JOptionPane.ERROR_MESSAGE);
        return;
        }
        }*/
        /*        if (!new File(savePathEdit.getText() + "\\temp").exists()) {
        boolean success = (new File(savePathEdit.getText() + "\\temp")).mkdir();
        if (!success) {
        JOptionPane.showMessageDialog(this, "امکان ذخیره اطلاعات در مسیر مورد نظر وجود ندارد",
        "خطا",
        JOptionPane.ERROR_MESSAGE);
        return;
        }
        }
         */
        //4 : download and save file
        try {
            URL url = new URL(urlEdit.getText());

            // 5 : add html extension to file if it doesn't have any
            String fileName = url.getFile().substring(url.getFile().lastIndexOf("/") + 1);
            if (fileName.lastIndexOf(".") == -1) {
                fileName += ".html";
            }

            File file = new File(savePathEdit.getText() + "\\" + fileName);
            Download.download(url, file);
            outputText.append("Downloaded : " + url.toExternalForm() + "\n");

            // 6 : create dir with name *_files
            File dir = new File(savePathEdit.getText() + "\\" + fileName + "_files");
            dir.mkdir();

            /*
            // 7 : convert document to xhtml by jTidy for parsing it
            ConvertToXhtml.convert(savePathEdit.getText() + "\\" + fileName,
            savePathEdit.getText() + "\\temp\\" + fileName+".xhtml");
            
            // 8 : now parse the xhtml file and save any Image,JavaSCript,StyleSheet
            XhtmlParser parser = new XhtmlParser();
            //System.out.println(savePathEdit.getText() + "\\temp\\" + fileName+".xhtml");
            parser.run(savePathEdit.getText() + "\\temp\\" + fileName+".xhtml",
            savePathEdit.getText() + "\\" + fileName + "_files",
            urlEdit.getText());
             */

            // 7 : download all images and resources by JSoup
            String dUrl = urlEdit.getText(); //"file:///" + file.toString().replace("\\", "/");
            print(dUrl);
            print("Fetching %s...", dUrl);

            Document doc = Jsoup.connect(dUrl).get();
            Elements links = doc.select("a[href]");
            Elements media = doc.select("[src]");
            Elements imports = doc.select("link[href]");

            print("\nMedia: (%d)", media.size());
            for (Element src : media) {
                if (src.tagName().equals("img")) {

                    print(" * %s: <%s> %sx%s (%s)",
                            src.tagName(), src.attr("abs:src"), src.attr("width"), src.attr("height"),
                            trim(src.attr("alt"), 20));                    
                } else {
                    print(" * %s: <%s>", src.tagName(), src.attr("abs:src"));
                }
                downloadResource(src, fileName);
            }

            print("\nImports: (%d)", imports.size());
            for (Element link : imports) {
                print(" * %s <%s> (%s)", link.tagName(), link.attr("abs:href"), link.attr("rel"));
            }

            // 8 : add internal links to the queue
            print("\nLinks: (%d)", links.size());
            for (Element link : links) {
                print(" * a: <%s>  (%s)", link.attr("abs:href"), trim(link.text(), 35));
            }


        } catch (IOException e) {
            e.printStackTrace();
        }




    }//GEN-LAST:event_downloadButtonActionPerformed

    private void print(String msg, Object... args) {
        //System.out.println(String.format(msg, args));
        outputText.append(String.format(msg, args));
        outputText.append("\n");
    }

    private String trim(String s, int width) {
        if (s.length() > width) {
            return s.substring(0, width - 1) + ".";
        } else {
            return s;
        }
    }

    private void downloadResource(Element src, String fileName) {
        try {
            // download resources
            String fn = src.attr("abs:src");
            fn = fn.substring(fn.lastIndexOf("/") + 1);
            fn = savePathEdit.getText() + "\\" + fileName + "_files" + "\\" + fn;
            //System.out.println(fileName);
            File f = new File(fn);
            //JSOUP resolves all relative addresses for us, thanks JSoup
            URL u = new URL(src.attr("abs:src"));
//                    if (tag.getSrc().startsWith("/")) {
//                        u = new URL(new URL(baseSite), tag.getSrc().substring(1));
//                    } else {
//                        u = new URL(new URL(baseSite), tag.getSrc());
//                    }
            //System.out.println(url.toExternalForm());

            Download.download(u, f);
        } catch (FileNotFoundException e) {
            print("%s", e.getMessage());
        } catch (Exception e) {
            print("%s", e.getMessage());
        }
    }

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        final JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(savePathEdit.getText()));
        chooser.setDialogTitle("Select Directory to Save Site ...");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            savePathEdit.setText(file.getAbsolutePath());
        }


    }//GEN-LAST:event_browseButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);

    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            // Set System L&F
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException e) {
            // handle exception
        } catch (ClassNotFoundException e) {
            // handle exception
        } catch (InstantiationException e) {
            // handle exception
        } catch (IllegalAccessException e) {
            // handle exception
        }
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browsButton;
    private javax.swing.JButton downloadButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputText;
    private javax.swing.JTextField savePathEdit;
    private javax.swing.JTextField urlEdit;
    // End of variables declaration//GEN-END:variables
}
